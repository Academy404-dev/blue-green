apiVersion: v1
kind: Namespace
metadata:
  name: backend
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: knodeapp
  namespace: backend
spec:
  replicas: 3
  selector:
    matchLabels:
      app: knodeapp
  template:
    metadata:
      labels:
        app: knodeapp
    spec:
      containers:
        - name: knodeapp
          image: norman404/eneroappnodes:<IMAGE_TAG>
          ports:
            - containerPort: 3000
---
apiVersion: v1
kind: Service
metadata:
  name: knodeapp-service
  namespace: backend
spec:
  type: ClusterIP
  ports:
    - port: 3000
      targetPort: 3000
  selector:
    app: knodeapp
---
apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  name: letsencrypt-nginx
  namespace: backend
spec:
  # ACME issuer configuration
  # `email` - the email address to be associated with the ACME account (make sure it's a valid one)
  # `server` - the URL used to access the ACME serverâ€™s directory endpoint
  # `privateKeySecretRef` - Kubernetes Secret to store the automatically generated ACME account private key
  acme:
    email: norman@demo.com
    server: https://acme-v02.api.letsencrypt.org/directory
    privateKeySecretRef:
      name: letsencrypt-nginx-private-key
    solvers:
      # Use the HTTP-01 challenge provider
      - http01:
          ingress:
            class: nginx
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: knodeapp-ingress
  namespace: backend
  annotations:
    cert-manager.io/issuer: letsencrypt-nginx
spec:
  ingressClassName: nginx
  tls:
    - hosts: 
      - backend.knodeapp.molcajete.dev
      secretName: letsencrypt-nginx
  rules:
  - host: backend.knodeapp.molcajete.dev
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: knodeapp-service
            port:
              number: 3000